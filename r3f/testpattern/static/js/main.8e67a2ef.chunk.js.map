{"version":3,"sources":["assets/testpattern_flat_400x400.jpeg","App.js","index.js"],"names":["Box","props","scale","rotation","position","attach","color","GenerateTestPattern","ref","useRef","React","useState","colorBoxes","setColorBoxes","useEffect","io","Image","src","testpattern","onload","console","log","ctx","current","getContext","newWidth","width","newHeight","height","drawImage","data","getImageData","colorMap","i","r","g","b","a","createColorMap","map","cm","arr","toString","slice","camera","fov","near","far","intensity","angle","style","display","App","ReactDOM","render","document","getElementById"],"mappings":"4OAAe,G,MAAA,IAA0B,uDCgBzC,SAASA,EAAIC,GACX,OACE,uBACEC,MAAOD,EAAMC,MACbC,SAAU,CAAC,EAAG,EAAG,GACjBC,SAAUH,EAAMG,SAHlB,UAKE,mCAAmBC,OAAO,aAC1B,qCAAqBA,OAAO,WAAWC,MAAOL,EAAMK,WAK1D,SAASC,IACP,IAAMC,EAAMC,mBADiB,EAEOC,IAAMC,SAAS,IAFtB,mBAEtBC,EAFsB,KAEVC,EAFU,KAkD7B,OA9CAH,IAAMI,WAAU,WACd,IAAMC,EAAK,IAAIC,MACfD,EAAGE,IAAMC,EAETH,EAAGI,OAAS,WACVC,QAAQC,IAAI,kBACZ,IAAMC,EAAMd,EAAIe,QAAQC,WAAW,MAC7BtB,EAAQ,GACRuB,EAAWvB,EAAQa,EAAGW,MACtBC,EAAYzB,EAAQa,EAAGa,OAE7BN,EAAIpB,MAAMA,EAAOA,GACjBoB,EAAIO,UAAUd,EAAI,EAAG,GAErB,IACMe,EADUR,EAAIS,aAAa,EAAG,EAAGN,EAAUE,GAC5BG,KAerB,IAEMlB,EAfN,WAEE,IADA,IAAIoB,EAAW,GACPC,EAAI,EAAGA,EAAKR,EAASE,EAAU,EAAIM,GAAK,EAAG,CACjD,IAAMC,EAAIJ,EAAKG,GACTE,EAAIL,EAAKG,EAAI,GACbG,EAAIN,EAAKG,EAAI,GACbI,EAAIP,EAAKG,EAAI,GACnBD,EAASC,GAAK,CAACC,EAAEC,EAAEC,EAAEC,GAGvB,OADAjB,QAAQC,IAAIW,GACLA,EAKUM,GAAiBC,KAAI,SAACC,EAAIP,GAAL,OAEpC,cAACjC,EAAD,CAAaE,MAAO,CAAC,EAAE,EAAEsC,EAAG,GAAG,IAAKpC,SAAU,EAAG6B,GAAY,EAATR,GAAsB,EAATA,GAJtD,IAI6EQ,EAAEN,EAAqB,EAAVA,GAJ1F,EAIgH,GAAIrB,OA5DvHmC,EA4DuID,EAvDhJ,KAAO,UAJFC,EAAI,IAGI,GAFNA,EAAI,IAEkB,EADvBA,EAAI,IACiC,IACnBC,SAAS,IAAIC,MAAM,KAuDhCV,GA5DpB,IAAkBQ,KAgEZ5B,EAAcD,MAMf,IAGD,qCACE,eAAC,IAAD,CAAQgC,OAAQ,CAAEC,IAAK,GAAIC,KAAM,GAAKC,IAAK,IAAM3C,SAAU,CAAC,EAAG,GAAI,MAAnE,UACE,cAAC,IAAD,IACA,8BAAc4C,UAAW,KACzB,2BAAW5C,SAAU,CAAC,GAAI,GAAI,IAAK6C,MAAO,KACzCrC,EACD,cAAC,IAAD,OAEF,wBAAQJ,IAAKA,EAAK0C,MAAO,CAACC,QAAQ,aAMzB,SAASC,IACtB,OACE,mCACE,cAAC7C,EAAD,MC7FN8C,IAASC,OAAO,cAACF,EAAD,IAASG,SAASC,eAAe,W","file":"static/js/main.8e67a2ef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/testpattern_flat_400x400.f2439870.jpeg\";","import React, { useRef } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { OrbitControls, Stars } from \"drei\";\nimport { Physics, usePlane, useBox } from \"use-cannon\";\nimport \"./styles.css\";\nimport testpattern from './assets/testpattern_flat_400x400.jpeg'\n\nfunction rgbToHex(arr) {\n  const red = arr[0]\n  const green = arr[1]\n  const blue = arr[2]\n  const rgb = (red << 16) | (green << 8) | (blue << 0);\n  return '#' + (0x1000000 + rgb).toString(16).slice(1);\n}\n\n\nfunction Box(props) {\n  return (\n    <mesh\n      scale={props.scale}\n      rotation={[0, 0, 0]}\n      position={props.position}\n    >\n      <boxBufferGeometry attach=\"geometry\" />\n      <meshLambertMaterial attach=\"material\" color={props.color} />\n    </mesh>\n  );\n}\n\nfunction GenerateTestPattern() {\n  const ref = useRef()\n  const [colorBoxes, setColorBoxes] = React.useState([])\n\n  React.useEffect(() => {\n    const io = new Image();\n    io.src = testpattern;\n  \n    io.onload = () => {\n      console.log('image did load')\n      const ctx = ref.current.getContext('2d')\n      const scale = 0.1\n      const newWidth = scale * io.width \n      const newHeight = scale * io.height\n      \n      ctx.scale(scale, scale)\n      ctx.drawImage(io, 0, 0)\n      \n      const imgData = ctx.getImageData(0, 0, newWidth, newHeight)\n      const data = imgData.data\n\n      function createColorMap() {\n        let colorMap = []\n        for(let i = 0; i < (newWidth*newHeight*4); i += 4) {\n          const r = data[i];\n          const g = data[i + 1];\n          const b = data[i + 2];\n          const a = data[i + 3];\n          colorMap[i] = [r,g,b,a]\n        }\n        console.log(colorMap)\n        return colorMap\n      }\n\n      const scaler = 3\n\n      const colorBoxes = createColorMap().map((cm, i) =>\n        (\n          <Box key={i} scale={[1,1,cm[0]/50]} position={[ (i%(newWidth*4)-(newWidth*2))/scaler, (-i/newHeight+(newHeight*2))/scaler, 0]} color={rgbToHex(cm)} />\n        )\n      )\n\n      setColorBoxes(colorBoxes)\n      \n    }\n\n    \n\n  }, []); \n\n  return (\n    <>\n      <Canvas camera={{ fov: 75, near: 0.1, far: 1000, position: [0, 0, -100] }}>\n        <Stars></Stars>\n        <ambientLight intensity={0.5} />\n        <spotLight position={[10, 15, 10]} angle={0.3} />\n        {colorBoxes}\n        <OrbitControls></OrbitControls>\n      </Canvas>\n      <canvas ref={ref} style={{display:\"none\"}}></canvas>\n    </>\n  )\n}\n\n\nexport default function App() {\n  return (\n    <>\n      <GenerateTestPattern></GenerateTestPattern>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}