{"version":3,"sources":["assets/heads.mp4","App.js","index.js"],"names":["Box","props","scale","rotation","position","attach","color","GenerateTestPattern","canvasref","useRef","videoref","React","useState","colorBoxes","setColorBoxes","useLayoutEffect","current","src","videofile","addEventListener","console","log","width","height","setTimeout","ctx","getContext","drawImage","h","w","data","getImageData","in_min","out_min","colorMap","i","newWidth","r","g","b","a","bt709","z","createColorMap","map","cm","newHeight","arr","toString","slice","pixelRatio","camera","fov","near","far","intensity","angle","ref","controls","style","top","autoplay","display","App","ReactDOM","render","document","getElementById"],"mappings":"4OAAe,G,MAAA,IAA0B,mCCmBzC,SAASA,EAAIC,GACX,OACE,uBACEC,MAAOD,EAAMC,MACbC,SAAUF,EAAME,SAChBC,SAAUH,EAAMG,SAHlB,UAKE,sCAAsBC,OAAO,aAC7B,qCAAqBA,OAAO,WAAWC,MAAOL,EAAMK,WAiB1D,SAASC,IACP,IAAMC,EAAYC,mBACZC,EAAWD,mBAFY,EAIOE,IAAMC,SAAS,IAJtB,mBAItBC,EAJsB,KAIVC,EAJU,KAyF7B,OAnFAH,IAAMI,iBAAgB,WACpBL,EAASM,QAAQC,IAAMC,EAEvBR,EAASM,QAAQG,iBAAiB,cAAc,WAC9CC,QAAQC,IAAI,YAGdX,EAASM,QAAQG,iBAAiB,QAAQ,WACxCC,QAAQC,IAAI,WACZX,EAASM,QAAQM,MAAQ,EACzBZ,EAASM,QAAQO,OAAS,OAE5B,IAEFC,YAKA,WAEE,IAAMC,EAAMjB,EAAUQ,QAAQU,WAAW,MAQzCD,EAAIE,UAAUjB,EAASM,QAAS,EAAG,EAHlBY,GACCC,IAIlB,IACMC,EADUL,EAAIM,aAAa,EAAG,EALnBH,GACCC,IAKGC,KA6BrB,IAKMjB,EA7BN,WAEE,IADA,IAzEamB,EAAkBC,EAyE3BC,EAAW,GACPC,EAAI,EAAGA,EAAKC,MAA4BD,GALnC,EAKgD,CAC3D,IAAIE,EAAIP,EAAKK,GACTG,EAAIR,EAAKK,EAAI,GACbI,EAAIT,EAAKK,EAAI,GACbK,EAAIV,EAAKK,EAAI,GAEbM,EAAS,MAAOJ,EAAM,MAAOC,EAAM,MAAOC,EAC1CE,EAAO,QACTA,GAAe,OAEjB,IAAIC,GAASD,GApFFT,EAoFS,MAAY,IApFHC,EAoFD,KAAL,IAnFyBD,GAAUC,EAwF1DC,EAASC,GAAK,CAACE,EAAEC,EAAEC,EAAEC,EAAEE,GAIzB,OAAOR,EAQUS,GAAiBC,KAAI,SAACC,EAAIV,GAAL,OAEpC,cAACnC,EAAD,CAEEE,MAAO,CAAC,EANK,IAMQ,EANR,IAMqB,EANrB,KAQbE,SAAU,EAAG+B,EAAE,IAAmBC,IAXxB,MAWgDD,EA7C9CN,GA6C2DiB,KAV7D,IAUoFD,EAAG,IACjGvC,OApHQyC,EAoHQF,EA/GjB,KAAO,UAJFE,EAAI,IAGI,GAFNA,EAAI,IAEkB,EADvBA,EAAI,IACiC,IACnBC,SAAS,IAAIC,MAAM,KA2GrCd,GAhHf,IAAkBY,KAyHdjC,EAAcD,KAhEG,IAsEjB,qCAEE,eAAC,IAAD,CAAQqC,WAAY,EAAGC,OAAQ,CAAEC,IAAK,GAAIC,KAAM,GAAKC,IAAK,IAAKlD,SAAU,EAAE,IAAK,GAAI,MAApF,UAEE,8BAAcmD,UAAW,KACzB,2BAAWnD,SAAU,CAAC,GAAI,GAAI,KAAMoD,MAAO,KAC1C3C,EACD,cAAC,IAAD,OAEF,uBAAO4C,IAAK/C,EAAUgD,UAAU,EAAMC,MAAO,CAACvD,SAAS,WAAYwD,IAAI,GAAIC,UAAQ,IACnF,wBAAQJ,IAAKjD,EAAWmD,MAAO,CAACG,QAAQ,aAM/B,SAASC,IACtB,OACE,mCACE,cAACxD,EAAD,MCrJNyD,IAASC,OAAO,cAACF,EAAD,IAASG,SAASC,eAAe,W","file":"static/js/main.12e861e4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/heads.1109c65e.mp4\";","import React, { useRef } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { CameraShake, OrbitControls, Stars } from \"drei\";\nimport \"./styles.css\";\n//import testpattern from './assets/testpattern_flat_400x400.jpeg'\nimport videofile from './assets/heads.mp4'\n\nfunction rgbToHex(arr) {\n  const red = arr[0]\n  const green = arr[1]\n  const blue = arr[2]\n  const rgb = (red << 16) | (green << 8) | (blue << 0);\n  return '#' + (0x1000000 + rgb).toString(16).slice(1);\n}\n\nfunction _map( x,  in_min,  in_max,  out_min,  out_max){\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nfunction Box(props) {\n  return (\n    <mesh\n      scale={props.scale}\n      rotation={props.rotation}\n      position={props.position}\n    >\n      <sphereBufferGeometry attach=\"geometry\" />\n      <meshLambertMaterial attach=\"material\" color={props.color} />\n    </mesh>\n  );\n}\n\n// function Controls() {\n//   const ref = useRef();\n\n//   setTimeout(function(){\n\n//   }, 100)\n\n//   return (\n//       <OrbitControls target={[0, 0, 0]} ref={ref} args={[camera, gl.domElement]} />\n//   );\n// }\n\nfunction GenerateTestPattern() {\n  const canvasref = useRef()\n  const videoref = useRef()\n\n  const [colorBoxes, setColorBoxes] = React.useState([])\n\n  React.useLayoutEffect(() => {\n    videoref.current.src = videofile\n    \n    videoref.current.addEventListener('loadeddata', function() {\n      console.log('ready')\n    });\n\n    videoref.current.addEventListener('play', function() {\n      console.log('playing')\n      videoref.current.width = 1\n      videoref.current.height = 1\n    });\n  },[])\n\n  setTimeout(update, 1000/20)\n\n  \n  \n\n  function update() {\n\n    const ctx = canvasref.current.getContext('2d')\n\n    const h = 23\n    const w = 32\n\n    const newWidth = h * 2\n    const newHeight = w * 2\n    \n    ctx.drawImage(videoref.current, 0, 0, newWidth, newHeight);\n    \n    const imgData = ctx.getImageData(0, 0, newWidth, newHeight)\n    const data = imgData.data\n\n    const pixels = 4\n    \n\n    function createColorMap() {\n      let colorMap = []\n      for(let i = 0; i < (newWidth*newHeight*pixels); i += pixels) {\n        let r = data[i];\n        let g = data[i + 1];\n        let b = data[i + 2];\n        let a = data[i + 3];\n        let sumVals = (r+g+b)\n        let bt709 = (0.2126*r) + (0.7152*g) + (0.0722*b)\n        if (bt709<(255/2)) {\n          bt709 = bt709+(255/2)\n        } \n        let z = _map(bt709, 0, 255, 0, -30)\n        // if (r+g+b>100){\n        //   colorMap[i] = [r,g,b,a,z]\n        // }\n        //let n = [i-width-1,with]\n        colorMap[i] = [r,g,b,a,z]\n        \n      }\n      //console.log(colorMap)\n      return colorMap\n    }\n\n    const scalerX = 4.5\n    const scalerY = 6.2\n\n    const sizefactor = 2.2\n\n    const colorBoxes = createColorMap().map((cm, i) =>\n      (\n        <Box \n          key={i} \n          scale={[1/sizefactor,1/sizefactor,1/sizefactor]} \n          //rotation={[cm[0],cm[1]*2,cm[2]*3]}\n          position={[ (i%(newWidth*pixels)-(newWidth*2))/scalerX, (-i/newHeight+(newHeight*3))/scalerY, cm[4]]} \n          color={rgbToHex(cm)} \n        />\n      )\n    )\n\n    setColorBoxes(colorBoxes)\n     \n  }\n\n\n  return (\n    <>\n   \n      <Canvas pixelRatio={2} camera={{ fov: 20, near: 0.1, far: 500, position: [-30, -50, 200] }}>\n        {/* <Stars></Stars> */}\n        <ambientLight intensity={0.5} />\n        <spotLight position={[10, 15, 150]} angle={0.3} />\n        {colorBoxes}\n        <OrbitControls></OrbitControls>\n      </Canvas>\n      <video ref={videoref} controls={true} style={{position:\"absolute\", top:0}} autoplay></video>\n      <canvas ref={canvasref} style={{display:\"none\"}}></canvas>\n    </>\n  )\n}\n\n// autoRotate=\"1\" autoRotateSpeed=\"30\"\nexport default function App() {\n  return (\n    <>\n      <GenerateTestPattern></GenerateTestPattern>\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}