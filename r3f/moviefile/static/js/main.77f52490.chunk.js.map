{"version":3,"sources":["assets/sample-mp4-file.mp4","App.js","index.js"],"names":["Box","props","scale","rotation","position","attach","color","GenerateTestPattern","canvasref","useRef","videoref","React","useState","colorBoxes","setColorBoxes","useLayoutEffect","current","src","videofile","addEventListener","console","log","setTimeout","ctx","getContext","drawImage","data","getImageData","colorMap","i","newWidth","r","g","b","a","createColorMap","map","cm","newHeight","arr","toString","slice","camera","fov","near","far","intensity","angle","ref","controls","style","top","autoplay","display","App","ReactDOM","render","document","getElementById"],"mappings":"4OAAe,G,MAAA,IAA0B,6CCgBzC,SAASA,EAAIC,GACX,OACE,uBACEC,MAAOD,EAAMC,MACbC,SAAU,CAAC,EAAG,EAAG,GACjBC,SAAUH,EAAMG,SAHlB,UAKE,mCAAmBC,OAAO,aAC1B,qCAAqBA,OAAO,WAAWC,MAAOL,EAAMK,WAK1D,SAASC,IACP,IAAMC,EAAYC,mBACZC,EAAWD,mBAFY,EAIOE,IAAMC,SAAS,IAJtB,mBAItBC,EAJsB,KAIVC,EAJU,KA8H7B,OAxHAH,IAAMI,iBAAgB,WACpBL,EAASM,QAAQC,IAAMC,EAEvBR,EAASM,QAAQG,iBAAiB,cAAc,WAC9CC,QAAQC,IAAI,gBAEd,IAEFC,YAKA,WAEE,IAAMC,EAAMf,EAAUQ,QAAQQ,WAAW,MAEzCD,EAAIE,UAAUf,EAASM,QAAS,EAAG,EAAG,GAAI,IAE1C,IAgBMU,EADUH,EAAII,aAAa,EAAG,EAfnB,GACC,IAeGD,KAkBrB,IAGMb,EAhBN,WAEE,IADA,IAAIe,EAAW,GACPC,EAAI,EAAGA,EAAKC,KAA4BD,GALnC,EAKgD,CAC3D,IAAME,EAAIL,EAAKG,GACTG,EAAIN,EAAKG,EAAI,GACbI,EAAIP,EAAKG,EAAI,GACbK,EAAIR,EAAKG,EAAI,GACnBD,EAASC,GAAK,CAACE,EAAEC,EAAEC,EAAEC,GAGvB,OAAON,EAMUO,GAAiBC,KAAI,SAACC,EAAIR,GAAL,OAEpC,cAAC7B,EAAD,CAEEE,MAAO,CAAC,EAAE,EAAEmC,EAAG,GAAG,IAClBjC,SAAU,EAAGyB,EAAE,IAAmBC,IARxB,MAQgDD,EAzC9C,GAyC2DS,IAP7D,IAOoF,GAC9FhC,OA1FQiC,EA0FQF,EArFjB,KAAO,UAJFE,EAAI,IAGI,GAFNA,EAAI,IAEkB,EADvBA,EAAI,IACiC,IACnBC,SAAS,IAAIC,MAAM,KAkFrCZ,GAvFf,IAAkBU,KA+FdzB,EAAcD,KA3DG,IAAK,IAiHtB,qCAEE,eAAC,IAAD,CAAQ6B,OAAQ,CAAEC,IAAK,GAAIC,KAAM,GAAKC,IAAK,IAAMzC,SAAU,CAAC,GAAI,GAAI,KAApE,UAEE,8BAAc0C,UAAW,KACzB,2BAAW1C,SAAU,CAAC,GAAI,GAAI,IAAK2C,MAAO,KACzClC,EACD,cAAC,IAAD,OAEF,uBAAOmC,IAAKtC,EAAUuC,UAAU,EAAMC,MAAO,CAAC9C,SAAS,WAAY+C,IAAI,GAAIC,UAAQ,IACnF,wBAAQJ,IAAKxC,EAAW0C,MAAO,CAACG,QAAQ,aAM/B,SAASC,IACtB,OACE,mCACE,cAAC/C,EAAD,MC3KNgD,IAASC,OAAO,cAACF,EAAD,IAASG,SAASC,eAAe,W","file":"static/js/main.77f52490.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sample-mp4-file.1f058b06.mp4\";","import React, { useRef } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { OrbitControls, Stars } from \"drei\";\nimport \"./styles.css\";\n//import testpattern from './assets/testpattern_flat_400x400.jpeg'\nimport videofile from './assets/sample-mp4-file.mp4'\n\nfunction rgbToHex(arr) {\n  const red = arr[0]\n  const green = arr[1]\n  const blue = arr[2]\n  const rgb = (red << 16) | (green << 8) | (blue << 0);\n  return '#' + (0x1000000 + rgb).toString(16).slice(1);\n}\n\n\nfunction Box(props) {\n  return (\n    <mesh\n      scale={props.scale}\n      rotation={[0, 0, 0]}\n      position={props.position}\n    >\n      <boxBufferGeometry attach=\"geometry\" />\n      <meshLambertMaterial attach=\"material\" color={props.color} />\n    </mesh>\n  );\n}\n\nfunction GenerateTestPattern() {\n  const canvasref = useRef()\n  const videoref = useRef()\n\n  const [colorBoxes, setColorBoxes] = React.useState([])\n\n  React.useLayoutEffect(() => {\n    videoref.current.src = videofile\n    \n    videoref.current.addEventListener('loadeddata', function() {\n      console.log('playing')\n    });\n  },[])\n\n  setTimeout(update, 1000/24)\n\n  \n  \n\n  function update() {\n\n    const ctx = canvasref.current.getContext('2d')\n    \n    ctx.drawImage(videoref.current, 0, 0, 32, 23);\n    \n    const newWidth = 32 //* io.width \n    const newHeight = 23 //* io.height\n    \n    //let scale = 1\n    //const io = new Image();\n    \n    //ctx.drawImage(io, 0, 0)\n    //ctx.scale(scale, scale)\n\n    // if (scale == 0.5) {\n    //   ctx.scale(scale, scale)\n    // }\n\n    // scale = 1\n    \n    const imgData = ctx.getImageData(0, 0, newWidth, newHeight)\n    const data = imgData.data\n\n    const pixels = 4\n    \n\n    function createColorMap() {\n      let colorMap = []\n      for(let i = 0; i < (newWidth*newHeight*pixels); i += pixels) {\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        const a = data[i + 3];\n        colorMap[i] = [r,g,b,a]\n      }\n      //console.log(colorMap)\n      return colorMap\n    }\n\n    const scalerX = 3.5\n    const scalerY = 4.5\n\n    const colorBoxes = createColorMap().map((cm, i) =>\n      (\n        <Box \n          key={i} \n          scale={[1,1,cm[0]/50]} \n          position={[ (i%(newWidth*pixels)-(newWidth*2))/scalerX, (-i/newHeight+(newHeight*2))/scalerY, 0]} \n          color={rgbToHex(cm)} \n        />\n      )\n    )\n\n    setColorBoxes(colorBoxes)\n\n    // wait for the browser to be ready to present another animation fram.       \n  }\n\n  // React.useEffect(() => {\n  //   const io = new Image();\n  //   io.src = testpattern;\n\n    \n  \n  //   io.onload = () => {\n  //     console.log('image did load')\n  //     const ctx = canvasref.current.getContext('2d')\n  //     const scale = 0.1\n  //     const newWidth = scale * io.width \n  //     const newHeight = scale * io.height\n      \n  //     ctx.scale(scale, scale)\n  //     ctx.drawImage(io, 0, 0)\n      \n  //     const imgData = ctx.getImageData(0, 0, newWidth, newHeight)\n  //     const data = imgData.data\n\n  //     function createColorMap() {\n  //       let colorMap = []\n  //       for(let i = 0; i < (newWidth*newHeight*4); i += 4) {\n  //         const r = data[i];\n  //         const g = data[i + 1];\n  //         const b = data[i + 2];\n  //         const a = data[i + 3];\n  //         colorMap[i] = [r,g,b,a]\n  //       }\n  //       //console.log(colorMap)\n  //       return colorMap\n  //     }\n\n  //     const scaler = 3\n\n  //     const colorBoxes = createColorMap().map((cm, i) =>\n  //       (\n  //         <Box key={i} scale={[1,1,cm[0]/50]} position={[ (i%(newWidth*4)-(newWidth*2))/scaler, (-i/newHeight+(newHeight*2))/scaler, 0]} color={rgbToHex(cm)} />\n  //       )\n  //     )\n\n  //     setColorBoxes(colorBoxes)\n      \n  //   }\n\n    \n\n  // }, []); \n\n  return (\n    <>\n   \n      <Canvas camera={{ fov: 75, near: 0.1, far: 1000, position: [0, -30, 30] }}>\n        {/* <Stars></Stars> */}\n        <ambientLight intensity={0.5} />\n        <spotLight position={[10, 15, 10]} angle={0.3} />\n        {colorBoxes}\n        <OrbitControls></OrbitControls>\n      </Canvas>\n      <video ref={videoref} controls={true} style={{position:\"absolute\", top:0}} autoplay></video>\n      <canvas ref={canvasref} style={{display:\"none\"}}></canvas>\n    </>\n  )\n}\n\n\nexport default function App() {\n  return (\n    <>\n      <GenerateTestPattern></GenerateTestPattern>\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}